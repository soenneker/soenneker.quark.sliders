@using Microsoft.AspNetCore.Components.Web
@using System.Globalization
@inherits Soenneker.Quark.Components.Element

<input type="range" @attributes="BuildAttributes()" />

@code {
    [Parameter]
    public double Value { get; set; } = 0;

    [Parameter]
    public double Min { get; set; } = 0;

    [Parameter]
    public double Max { get; set; } = 100;

    [Parameter]
    public double Step { get; set; } = 1;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    private static double ParseDouble(ChangeEventArgs e)
    {
        if (e?.Value == null)
            return 0d;

        var text = e.Value.ToString();
        if (double.TryParse(text, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
            return result;

        return 0d;
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        Value = ParseDouble(e);
        await ValueChanged.InvokeAsync(Value);
        if (OnInput.HasDelegate)
            await OnInput.InvokeAsync(e);
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        Value = ParseDouble(e);
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync(e);
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "form-range";

        attributes["class"] = AppendToClass(attributes.GetValueOrDefault("class")
            ?.ToString(), baseClasses);

        attributes["min"] = Min.ToString(CultureInfo.InvariantCulture);
        attributes["max"] = Max.ToString(CultureInfo.InvariantCulture);
        attributes["step"] = Step.ToString(CultureInfo.InvariantCulture);
        attributes["value"] = Value.ToString(CultureInfo.InvariantCulture);

        if (Disabled)
            attributes["disabled"] = true;

        // Sync value via events
        attributes["oninput"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleInput);
        attributes["onchange"] = EventCallback.Factory.Create<ChangeEventArgs>(this, HandleChange);

        return attributes;
    }

}
